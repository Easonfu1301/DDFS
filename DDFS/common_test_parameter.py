from DDFS.element import Environment, Particle, Emitter, Detector, SiLayer, Result
import pandas as pd
import math


def get_normal_dec_par_envir_set():
    dec = Detector()
    envir = Environment()
    emit = Emitter()

    par = Particle(charge=1, mass=0.106)

    emit_para1 = {
        "type": "even",
        "maxvalue": 30,
        "minvalue": 30
    }

    emit_para2 = {
        "type": "even",
        "maxvalue": 1e-3,
        "minvalue": -1e-3
    }

    emit_para3 = {
        "type": "even",
        "maxvalue": -0.5 * 2 * math.pi,
        "minvalue": 0.5 * 2 * math.pi
    }

    emit_mode = {
        "p": emit_para1,
        "theta": emit_para2,
        "phi": emit_para3
    }

    emit.add_particle(par, 1, emit_mode)
    print(emit)
    # emit.add_particle(par1, 1/3, "normal")
    # emit.add_particle(par2, 1/3, "normal")

    radius_list = [10.35, 12.35, 14.35, 34.324999999999996, 36.324999999999996, 58.3, 60.3, 65.0, 100, 200.0, 390, 400,
                   411.0, 429.0, 447.0, 465.0, 483.0, 501.0, 519.0, 537.0, 555.0, 573.0, 591.0, 609.0, 627.0, 645.0,
                   663.0, 681.0, 699.0, 717.0, 735.0, 753.0, 771.0, 789.0, 807.0, 825.0, 843.0, 861.0, 879.0, 897.0,
                   915.0, 933.0, 951.0, 969.0, 987.0, 1005.0, 1023.0, 1041.0, 1059.0, 1077.0, 1095.0, 1113.0, 1131.0,
                   1149.0, 1167.0, 1185.0, 1203.0, 1221.0, 1239.0, 1257.0, 1275.0, 1293.0, 1311.0, 1329.0, 1347.0,
                   1365.0, 1383.0, 1401.0, 1419.0, 1437.0, 1455.0, 1473.0, 1491.0, 1509.0, 1527.0, 1545.0, 1563.0,
                   1581.0, 1599.0, 1617.0, 1635.0, 1653.0, 1671.0, 1689.0, 1707.0, 1725.0, 1743.0, 1761.0, 1779.0, 1800,
                   1810]

    budget_list = [0.0017179033925197344, 0.003, 0.003, 0.003, 0.003, 0.003, 0.003, 0.0015, 0.0065, 0.0065, 0.0065,
                   0.0011, 0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445,
                   0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445,
                   0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445,
                   0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445,
                   0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445,
                   0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445,
                   0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445,
                   0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445,
                   0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445,
                   0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445,
                   0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445,
                   0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445,
                   0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445,
                   0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445,
                   0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445,
                   0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445,
                   0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445,
                   0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445,
                   0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445, 0.00013164444444444445,
                   0.00013164444444444445, 0.00013164444444444445, 0.013, 0.0065]

    loc0 = [9.9, 0.0028, 0.006, 0.004, 0.004, 0.004, 0.004, 9.9, 0.0072, 0.0072, 0.0072, 9.9, 0.1, 0.1, 0.1, 0.1, 0.1,
            0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
            0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
            0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1,
            0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 0.1, 9.9, 0.0072]

    loc1 = [9.9, 0.0028, 0.006, 0.004, 0.004, 0.004, 0.004, 9.9, 0.086, 0.086, 0.086, 9.9, 2.83, 2.83, 2.83, 2.83, 2.83,
            2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83,
            2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83,
            2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83,
            2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83, 2.83,
            9.9, 0.086]

    effi = [0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
            1.0, 1.0, 1.0, 1.0, 1.0, 0.0, 1.0]

    # radius_list = [i * 1000. for i in radius_list]
    # loc0 = [i * 1e3 for i in loc0]
    # loc1 = [i * 1e-3 for i in loc1]
    # budget_list = [i * 1e3 for i in budget_list]

    for i in range(0, len(radius_list)):
        dec.add_layer(
            SiLayer(material_budget=budget_list[i], radius=radius_list[i], efficiency=effi[i],
                    loc0=loc0[i], loc1=loc1[i]))

    print(len(dec))

    envir.update_environment("B", 30)
    envir.update_environment("multiple_scattering", True)
    # envir.update_environment("multiple_scattering", False)

    return dec, emit, envir


def load_design(file_path):
    # Read the CSV file into a DataFrame


    if file_path:
        print("选择的文件路径:", file_path)

    try:
        df = pd.read_csv(file_path)
    except Exception as e:
        print(e)
        return -1

    # Display the DataFrame
    print(df)

    radius_list = df['Radius'].tolist()
    budget_list = df['Budget'].tolist()
    half_z_list = df['Half_z'].tolist()
    loc0 = df['Location 0'].tolist()
    loc1 = df['Location 1'].tolist()
    effi = df['Efficiency'].tolist()

    dec = Detector()


    for i in range(0, len(radius_list)):
        dec.add_layer(
            SiLayer(material_budget=budget_list[i], radius=radius_list[i], efficiency=effi[i],
                    loc0=loc0[i], loc1=loc1[i], half_z=half_z_list[i]))


    return dec



